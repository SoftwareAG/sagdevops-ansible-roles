---
  
  - name: Print the params
    debug:
      msg: 
      - "Running webmethods product provisoning with:"
      - "target_host_aliases = {{ target_host_aliases | default('undefined') }}"
      - "run_dir = {{ run_dir | default('undefined') }}"
      - "template = {{ template | default('undefined') }}"
      - "properties = {{ properties | default('undefined') }}"
      - "template_params = {{ template_params | default('undefined') }}"
      - "template_params_secure = ******************"

  - name: Clear the all_host facts
    set_fact:
      all_hostaliases: []
      all_hostnames: []
      all_params: []
      all_params_secure: []

  - name: Build a list of all the hosts based on ansible aliases
    set_fact:
      all_hostaliases: "{{ all_hostaliases }} + [ '{{ item }}' ]"
      all_hostnames: "{{ all_hostnames }} + [ '{{ hostvars[item].ansible_host }}' ]"
    with_items: "{{ target_host_aliases }}"
    when: target_host_aliases is defined and (target_host_aliases|length>0)

  - name: Print the final target host aliases
    debug: var=all_hostaliases
    
  - name: Print the corresponding target hosts for template {{ template }}
    debug: var=all_hostnames
  
  - name: append template file to all_params list
    set_fact:
      all_params: "{{ all_params }} + [ 'template.path={{ template }}' ]"

  - name: append template properties file to all_params list
    set_fact:
      all_params: "{{ all_params }} + [ 'template.props={{ properties }}' ]"

  - name: append host aliases to the all_params list
    set_fact:
      all_params: "{{ all_params }} + [ 'target.aliases=[{{ all_hostaliases | join(',') }}]' ]"
    when: all_hostaliases is defined and (all_hostaliases|length>0)

  - name: append hostnames to the all_params list
    set_fact:
      all_params: "{{ all_params }} + [ 'target.nodes=[{{ all_hostnames | join(',') }}]' ]"
    when: all_hostnames is defined and (all_hostnames|length>0)

  - name: append non-secure params to the all_params list
    set_fact:
      all_params: "{{ all_params }} + [ '{{ item.name }}={{ item.value }}' ]"
    with_items: "{{ template_params }}"
    when: template_params is defined

  - name: append secure params to the all_params_secure list
    set_fact:
      all_params_secure: "{{ all_params_secure }} + [ '{{ item.name }}={{ item.value }}' ]"
    no_log: yes
    with_items: "{{ template_params_secure }}"
    when: template_params_secure is defined

  - name: Print the command that we're going to run
    debug:
      msg: "About to run: ./scripts/provision_stack.sh '{{ cce_owner }}' {{ all_params|wrap|join(' ') }} <!! hidden - + all_params_secure - hidden!!>"

  ## let's match this async timeout with the CCE job timeout set in the tuning template
  ## timeout.job.seconds: 4800
  - name: Run provision stack {{ template }}
    shell: ./scripts/provision_stack.sh '{{ cce_owner }}' {{ all_params|wrap|join(' ') }} {{ all_params_secure|wrap|join(' ') }}
    async: 4800
    poll: 0
    no_log: yes
    args:
      chdir: "{{ run_dir }}"
    register: provision_stack_sleeper

  ## let's match the retries/delay timeouts with the CCE job timeout set in the tuning template
  ## timeout.job.seconds: 4800
  - name: Check status for template {{ template }}
    async_status:
      jid: "{{ provision_stack_sleeper.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: 200
    delay: 24

  - name: TEMP - Print the job_result to the console.
    debug:
      msg: "{{ job_result.stdout_lines | join('\n') }}"

  - name: Copy command result to the server
    copy:
      content: "{{ job_result.stdout_lines | join('\n') }}"
      dest: "/home/{{ cce_owner }}/provision_stack_{{ inventory_hostname }}_{{ template | replace('/','-') }}.out"