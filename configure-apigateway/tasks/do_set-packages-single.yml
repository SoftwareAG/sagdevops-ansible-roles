---

  - debug: 
      msg: Begin tasks in do_set-packages-single.yml

  - debug: var=rvar_apigateway_packages_single verbosity=1

  - name: fail if mandatory params not specified
    fail: 
      msg: "A mandatory param was not defined, cannot do anything."
    when: item is not defined
    with_items:
      - "{{ rvar_apigateway_packages_single.name }}"
      - "{{ rvar_apigateway_packages_single.version }}"
      
  - name: First create a new object-to-save object that will get built progressively
    set_fact:
      _apigateway_object_to_save: {}

  - name: seconds, copy the passed in dict fields, removing the fields we don't need/want in the process
    set_fact:
      _apigateway_object_to_save: "{{ _apigateway_object_to_save | combine({item.key: item.value}) }}"
    when: item.key not in ['custom_apiIdsByFilter','custom_planIdsByFilter','custom_policyIdsByFilter']
    with_dict: "{{ rvar_apigateway_packages_single }}"

  - debug: var=_apigateway_object_to_save verbosity=1

######## fetch the main object ID if it's not already in the payload

  - debug: 
      msg: Fetching the package ID if it's not already in the payload

  - name: Get object id if it's not already in the payload
    block:

      - name: get the id based on the filter (returned in var rest_response_object_id)
        include_tasks: "packages/get-single-id.yml"
        vars:
          rvar_object_filter:
            name: "{{ rvar_apigateway_packages_single.name }}"
            version: "{{ rvar_apigateway_packages_single.version }}"

      - name: Merge the id into the object to save
        set_fact:
          _apigateway_object_to_save: "{{ _apigateway_object_to_save | combine({ 'id': rest_response_object_id },recursive=True) }}"
        when: rest_response_object_id is defined and rest_response_object_id != ""

    when: rvar_apigateway_packages_single.id is not defined or rvar_apigateway_packages_single.id == ""

######## fetch the APIs IDs if custom_apiIdsByFilter is specified
  
  - debug: 
      msg: Fetching the package API IDs if identified in rvar_apigateway_packages_single.custom_apiIdsByFilter list

  - name: Get object id if not specified
    block:

      - name: Get the internal API IDs identified in custom_apiIdsByFilter list
        include_tasks: "apis/getall-ids.yml"
        vars:
          rvar_object_filters: "{{ rvar_apigateway_packages_single.custom_apiIdsByFilter }}"

      - name: Merge the id into the object to save
        set_fact:
          _apigateway_object_to_save: "{{ _apigateway_object_to_save | combine({ 'apiIds': rest_response_object_ids },recursive=True) }}"
        when: rest_response_object_ids is defined

    when: rvar_apigateway_packages_single.custom_apiIdsByFilter is defined

  - name: Current object to save
    debug: var=_apigateway_object_to_save verbosity=1

######## fetch the PLANs IDs if custom_planIdsByFilter is specified

  - debug: 
      msg: Fetching the package Plan IDs if identified in rvar_apigateway_packages_single.custom_planIdsByFilter list

  - name: Get object id if not specified
    block:

      - name: Get the internal Plan IDs identified in custom_planIdsByFilter list
        include_tasks: "plans/getall-ids.yml"
        vars:
          rvar_object_filters: "{{ rvar_apigateway_packages_single.custom_planIdsByFilter }}"

      - name: Merge the id into the object to save
        set_fact:
          _apigateway_object_to_save: "{{ _apigateway_object_to_save | combine({ 'planIds': rest_response_object_ids },recursive=True) }}"
        when: rest_response_object_ids is defined

    when: rvar_apigateway_packages_single.custom_planIdsByFilter is defined

######## Add or Update _apigateway_object_to_save

  - name: Current package object to save
    debug: var=_apigateway_object_to_save verbosity=1

  - name: Update the existing package if it has a specific ID
    block:

      - name: get the existing package before updating it
        uri:
          url: "{{ apigateway_rest_packages_api }}/{{ _apigateway_object_to_save.id }}"
          method: GET
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          force_basic_auth: yes
          validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_get
      
      - name: Print full json object response
        debug:
          var: rest_response_get.json
          verbosity: 1

      - name: Save existing package response into current_package var
        set_fact:
          current_package: "{{ rest_response_get.json.packageResponse }}"

      - name: If package is active, deactivate package before edit
        include_tasks: "packages/activate.yml"
        vars:
          packages_currentobj_id: "{{ _apigateway_object_to_save.id }}"
          packages_activate: "false"
        when: current_package.active | bool == true

      - name: Combine current object in gateway (pre-update) with the new requested updates object _apigateway_object_to_save
        set_fact:
          _apigateway_object_to_save: "{{ current_package | combine(_apigateway_object_to_save,recursive=True) }}"

      - name: Payload object to be used for the update call
        debug: var=_apigateway_object_to_save verbosity=1

      - name: Update the existing package
        uri:
          url: "{{ apigateway_rest_packages_api }}/{{ _apigateway_object_to_save.id }}"
          method: PUT
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          body: "{{ _apigateway_object_to_save | to_json }}"
          force_basic_auth: yes
          validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_mutate_update
        
      - name: Response for new updated package
        debug: var=rest_response_mutate_update verbosity=1

    when: _apigateway_object_to_save.id is defined and _apigateway_object_to_save.id != ""

  - name: Create a new package if it does not exist (ie. if the _apigateway_object_to_save.id is empty)
    block:

      - name: Create a new package
        uri:
          url: "{{ apigateway_rest_packages_api }}"
          method: POST
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          body: "{{ _apigateway_object_to_save | default({}) | to_json }}"
          force_basic_auth: yes
          validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_mutate_create

      - name: Response for new created package
        debug: var=rest_response_mutate_create verbosity=1

      - name: Merge the created object id into _apigateway_object_to_save to be consistent
        set_fact:
          _apigateway_object_to_save: "{{ _apigateway_object_to_save | combine({ 'id': rest_response_mutate_create.json.packageResponse.id },recursive=True) }}"

    when: _apigateway_object_to_save.id is not defined or _apigateway_object_to_save.id == ""


########## activate package or not
  
  - name: activate or de-activate the package as requested in the update object
    include_tasks: "packages/activate.yml"
    vars:
      packages_currentobj_id: "{{ _apigateway_object_to_save.id }}"
      packages_activate: "{{ _apigateway_object_to_save.active | default('false',true) }}"

  - debug: 
      msg: End tasks in do_set-packages-single.yml