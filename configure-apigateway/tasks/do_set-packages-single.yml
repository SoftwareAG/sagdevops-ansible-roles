---

  - debug: 
      msg: Begin tasks in do_set-packages-single.yml

  - debug: var=rvar_apigateway_packages_single verbosity=1
  - debug: var=currentobj_package_id verbosity=1

  - name: fail if mandatory params not specified
    fail: 
      msg: "A mandatory param was not defined, cannot do anything."
    when: item is not defined
    with_items:
      - "{{ rvar_apigateway_packages_single.name }}"
      - "{{ rvar_apigateway_packages_single.version }}"

  - name: Get object id if not specified
    block:

      - name: get the id based on the filter (returned in var rest_response_object_id)
        include_tasks: "packages/get-single-package-id.yml"
        vars:
          rvar_object_filter:
            name: "{{ rvar_apigateway_packages_single.name }}"
            version: "{{ rvar_apigateway_packages_single.version }}"

      - name: Assign returned object id to custom var
        set_fact:
          currentobj_package_id: "{{ rest_response_object_id }}"

    when: currentobj_package_id is not defined or currentobj_package_id == ""

######## fetch the APIs IDs

  - name: Get object id if not specified
    block:

      - name: Get the internal API IDs identified in custom_apiIdsByFilter list
        include_tasks: "apis/getall-ids.yml"
        vars:
          rvar_object_filters: "{{ rvar_apigateway_packages_single.custom_apiIdsByFilter }}"

      - name: Assign returned object ids to custom var
        set_fact:
          custom_registerAPIsIDs: 
            apiIds: "{{ rest_response_object_ids }}"

      - debug: var=custom_registerAPIsIDs verbosity=1

      - name: Merge the apiIds array into the object to save
        set_fact:
          rvar_apigateway_packages_single: "{{ rvar_apigateway_packages_single | combine(custom_registerAPIsIDs,recursive=True) }}"

    when: rvar_apigateway_packages_single.custom_apiIdsByFilter is defined

######## Add or Update

  - name: Update the existing package if it existed (ie. if the currentobj_package_id is not empty)
    block:

      - name: get the existing package before updating it
        uri:
          url: "{{ apigateway_rest_packages_api }}/{{ currentobj_package_id }}"
          method: GET
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          force_basic_auth: yes
          validate_certs: false
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_get
      
      - name: Print full json object response
        debug:
          var: rest_response_get.json
          verbosity: 1

      - name: Create the initial update dictionary
        set_fact:
          current_package: "{{ rest_response_get.json.packageResponse }}"
          rvar_apigateway_packages_single_toupdate: {}

      - debug: var=rvar_apigateway_packages_single verbosity=1

      - name: Overwrite the values to update over the existing object
        set_fact:
          current_package: "{{ current_package | combine(rvar_apigateway_packages_single,recursive=True) }}"

      - debug: var=current_package verbosity=1

      - name: Build the dict to updated, starting with the current object, removing the fields we don't need/want in the process
        set_fact:
          rvar_apigateway_packages_single_toupdate: "{{ rvar_apigateway_packages_single_toupdate | combine({item.key: item.value}) }}"
        when: item.key not in ['id','custom_apiIdsByFilter','custom_planIdsByFilter','custom_policyIdsByFilter']
        with_dict: "{{ current_package }}"

      - debug: var=rvar_apigateway_packages_single_toupdate verbosity=1

      - name: Update the existing package
        uri:
          url: "{{ apigateway_rest_packages_api }}/{{ currentobj_package_id }}"
          method: PUT
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          body: "{{ rvar_apigateway_packages_single_toupdate | to_json }}"
          force_basic_auth: yes
          validate_certs: false
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_mutate_update
        
      - name: Response for new updated package
        debug: var=rest_response_mutate_update verbosity=1

    when: currentobj_package_id is defined and currentobj_package_id != ""

  - name: Create a new package if it does not exist (ie. if the currentobj_package_id is empty)
    block:

      - name: Create a new package
        uri:
          url: "{{ apigateway_rest_packages_api }}"
          method: POST
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          body: "{{ rvar_apigateway_packages_single | default({}) | to_json }}"
          force_basic_auth: yes
          validate_certs: false
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_mutate_create

      - name: Response for new created package
        debug: var=rest_response_mutate_create verbosity=1
      
      - name: Assign the currentobj_package_id value to be consistent with the create
        set_fact:
          currentobj_package_id: "{{ rest_response_mutate_create.json.packageResponse.id }}"

    when: currentobj_package_id is not defined or currentobj_package_id == ""


########## activate package or not
  
  - include_tasks: "do_set-packages-activate.yml"

  - debug: 
      msg: End tasks in do_set-packages-single.yml