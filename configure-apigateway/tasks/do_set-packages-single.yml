---

  - debug: var=rvar_apigateway_packages_single verbosity=1

  - name: First, get the id based on the name (returned in var rest_response_object_id)
    include_tasks: "packages/get-single-package-id-by-name.yml"
    vars:
      rvar_object_name: "{{ rvar_apigateway_packages_single.name }}"

  - name: Update the existing package if it existed
    block:

      - name: get the existing package before updating it
        uri:
          url: "{{ apigateway_rest_packages_api }}/{{ rest_response_object_id }}"
          method: GET
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          force_basic_auth: yes
          validate_certs: false
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_get
      
      - name: Print full json object response
        debug:
          var: rest_response_get.json
          verbosity: 1

      - name: Create the initial update dictionary
        set_fact:
          current_package: "{{ rest_response_get.json.packageResponse }}"
          rvar_apigateway_packages_single_toupdate: {}
        
      - name: Overwrite the values to update over the existing object
        set_fact:
          current_package: "{{ current_package | combine(rvar_apigateway_packages_single,recursive=True) }}"

      - debug: var=current_package verbosity=1

      - name: TODOs
        debug:
          msg: "TODO: need to lookup the 'names_version' variable values ('apisNamesVersions','planNamesVersions','policiesNames') and get their respective IDs"

      - name: Build the dict to updated, starting with the current object, removing the fields we don't need/want in the process
        set_fact:
          rvar_apigateway_packages_single_toupdate: "{{ rvar_apigateway_packages_single_toupdate | combine({item.key: item.value}) }}"
        when: item.key not in ['id','apisNamesVersions','planNamesVersions','policiesNames']
        with_dict: "{{ current_package }}"

      - debug: var=rvar_apigateway_packages_single_toupdate verbosity=1

      - name: Update the existing package
        uri:
          url: "{{ apigateway_rest_packages_api }}/{{ rest_response_object_id }}"
          method: PUT
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          body: "{{ rvar_apigateway_packages_single_toupdate | to_json }}"
          force_basic_auth: yes
          validate_certs: false
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_mutate_update
        
      - name: Response for new updated package
        debug: var=rest_response_mutate_update verbosity=1

    when: rest_response_object_id is defined and rest_response_object_id != ""

  - name: Create a new package if it does not exist
    block:

      - name: Create a new package
        uri:
          url: "{{ apigateway_rest_packages_api }}"
          method: POST
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          body: "{{ rvar_apigateway_packages_single | default({}) | to_json }}"
          force_basic_auth: yes
          validate_certs: false
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_mutate_create

      - name: Response for new created package
        debug: var=rest_response_mutate_create verbosity=1
      
      - name: Create the initial update dictionary
        set_fact:
          rest_response_object_id: "{{ rest_response_mutate_create.json.packageResponse.id }}"

    when: rest_response_object_id is not defined or rest_response_object_id == ""

  - name: Overwrite the values to update over the existing object
    set_fact:
      activate_package: "rvar_apigateway_packages_single.active | default('false', true) | bool"

  - name: Activate the package if flag active = true
    block:

      - name: Activate the package
        uri:
          url: "{{ apigateway_rest_packages_api }}/{{ rest_response_object_id }}/activate"
          method: PUT
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          force_basic_auth: yes
          validate_certs: false
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_activate

      - name: Response for activated package
        debug: var=rest_response_activate verbosity=1

    when: activate_package == true

  - name: Deactivate the package if flag active = false or does not exist
    block:

      - name: Deactivate the package
        uri:
          url: "{{ apigateway_rest_packages_api }}/{{ rest_response_object_id }}/deactivate"
          method: PUT
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          force_basic_auth: yes
          validate_certs: false
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_deactivate

      - name: Response for deactivated package
        debug: var=rest_response_deactivate verbosity=1

    when: activate_package == false