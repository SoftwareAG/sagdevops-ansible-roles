---

  - name: Print the params for the update-user-passwords tasks
    debug:
      msg: 
      - "User to update: {{ apigateway_update_user_username | default('undefined', true) }}"
    tags:
      - always
  
  - name: Set changed flag to false if not defined
    set_fact: 
      configure_apigateway_update_user_password_changed: false
    when: configure_apigateway_update_user_password_changed is not defined

  - name: check if marker file already there
    stat: 
      path: "{{ runtime_instance_config_file }}/.password_change_marker_{{ apigateway_update_user_username }}"
    register: previous_run_marker

  - name: Generate new marker based on current passed in values, and write it to a test file
    blockinfile:
      path: "{{ runtime_instance_config_file }}/.password_change_marker_test_{{ apigateway_update_user_username }}"
      create: yes
      backup: no
      mode: 0600
      block: |
        {{ apigateway_update_user_password | password_hash('sha512', 65534 | random(seed=configure_apigateway_update_user_password_seed_marker) | string) }}
    no_log: "{{ not ( disable_no_log | default(false,true) ) }}"

  - name: Get md5 from the new test file
    stat:
      path: "{{ runtime_instance_config_file }}/.password_change_marker_test_{{ apigateway_update_user_username }}"
    register: new_run_marker

  - name: set change action to true if the old marker file is not there (ie. first time) or the marker files do not match
    set_fact:
      do_update_password: "{{ previous_run_marker.stat.exists == false or new_run_marker.stat.checksum != previous_run_marker.stat.checksum }}"

  - name: Print the force_change var
    debug:
      var: do_update_password
      verbosity: 1

  - name: Set new ssl settings only if values are new
    block:

      - name: Get current User
        uri:
          url: "{{ apigateway_rest_users_api }}/{{ apigateway_update_user_username }}"
          method: GET
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          force_basic_auth: yes
          validate_certs: false
          status_code: [200]
          body_format: json
          timeout: 30
        register: get_user

      - name: Response for raw get_user
        debug: var=get_user verbosity=3

      - name: Parse response and get a full user payload from it
        set_fact:
          current_user: "{{ lookup('template', 'apigateway_restapi_get_user.json.j2') }}"

      - name: Response for current user
        debug: var=current_user verbosity=3

      - name: Change password field in current_user payload
        set_fact:
          updated_user: "{{ current_user | combine( {'password': apigateway_update_user_password}, recursive=True) }}"
        no_log: "{{ not ( disable_no_log | default(false,true) ) }}"

      - name: new updated user with new password
        debug: var=updated_user verbosity=3
        no_log: "{{ not ( disable_no_log | default(false,true) ) }}"

      - name: Update user passwords
        uri:
          url: "{{ apigateway_rest_users_api }}/{{ apigateway_update_user_username }}"
          method: PUT
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          body: "{{ updated_user }}"
          force_basic_auth: yes
          validate_certs: false
          status_code: 200, 201
          body_format: json
          timeout: 30
        no_log: "{{ not ( disable_no_log | default(false,true) ) }}"
        register: rest_response
        when: updated_user.id is defined

      - name: Print returned json dictionary
        debug:
          var: rest_response.json
          verbosity: 3

      - name: Generate changed marker and write it to file
        blockinfile:
          path: "{{ runtime_instance_config_file }}/.password_change_marker_{{ apigateway_update_user_username }}"
          create: yes
          backup: no
          mode: 0600
          block: |
            {{ apigateway_update_user_password | password_hash('sha512', 65534 | random(seed=configure_apigateway_update_user_password_seed_marker) | string) }}
        no_log: "{{ not ( disable_no_log | default(false,true) ) }}"

      - name: Set changed flag to true
        set_fact: 
          configure_apigateway_update_user_password_changed: true

    when: do_update_password | bool

  - name: Print the changed var
    debug:
      var: configure_apigateway_update_user_password_changed
      verbosity: 1