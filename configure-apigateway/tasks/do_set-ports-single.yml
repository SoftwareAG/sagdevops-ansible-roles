---

  - name: Port to update
    debug: var=webmethods_apigateway_port verbosity=1

  - name: fail if webmethods_apigateway_port.port_type not specified
    fail: 
      msg: "webmethods_apigateway_port.port_type not specified...cannot do anything."
    when: webmethods_apigateway_port.port_type is not defined

  - name: fail if webmethods_apigateway_port.port_detail not specified
    fail: 
      msg: "webmethods_apigateway_port.port_detail not specified...cannot do anything."
    when: webmethods_apigateway_port.port_detail is not defined
    
  - name: Extract port fields and save into variable
    set_fact:
      webmethods_apigateway_port_type: "{{ webmethods_apigateway_port.port_type }}"
      webmethods_apigateway_port_detail: "{{ webmethods_apigateway_port.port_detail }}"
      
  - name: Add the system fields to the object to save based on the port_type
    set_fact:
      webmethods_apigateway_port_detail: "{{ webmethods_apigateway_port_detail | combine(webmethods_apigateway_ports_types_internals[webmethods_apigateway_port_type],recursive=True) }}"

  - name: Add the bind address field if it's not there or empty
    set_fact:
      webmethods_apigateway_port_detail: "{{ webmethods_apigateway_port_detail | combine({ 'bindAddress': '0.0.0.0'},recursive=True) }}"
    when: webmethods_apigateway_port_detail.bindAddress is not defined or webmethods_apigateway_port_detail.bindAddress == ""

  - name: Create ports listenerkey based on the key values in webmethods_apigateway_port
    set_fact:
      webmethods_apigateway_port_listenerkey: "{{ lookup('template', 'apigateway_restapi_ports_create_listenerkey.json.j2') }}"
    vars:
      __wmport_type: "{{ webmethods_apigateway_port_type }}"
      __wmport_protocol: "{{ webmethods_apigateway_port_detail.protocol }}"
      __wmport_port: "{{ webmethods_apigateway_port_detail.port }}"
      __wmport_bindAddress: "{{ webmethods_apigateway_port_detail.bindAddress | default('',true) }}"
      __wmport_proxyHost: "{{ webmethods_apigateway_port_detail.proxyHost | default('',true) }}"

  - name: Get current API Gateway port based on listenerkey
    uri:
      url: "{{ apigateway_rest_is_ports }}?listenerKey={{ webmethods_apigateway_port_listenerkey }}"
      method: GET
      user: "{{ apigateway_rest_login_username }}"
      password: "{{ apigateway_rest_login_password }}"
      return_content: yes
      force_basic_auth: yes
      validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
      status_code: [200]
      body_format: json
      timeout: 30
    register: get_existing_port

  - name: If get_existing_port not found, and bindAddress was 0.0.0.0, try to find one more time without bindAddress
    block:

      - name: Create ports listenerkey without the bindAddress
        set_fact:
          webmethods_apigateway_port_listenerkey_2ndtry: "{{ lookup('template', 'apigateway_restapi_ports_create_listenerkey.json.j2') }}"
        vars:
          __wmport_type: "{{ webmethods_apigateway_port_type }}"
          __wmport_protocol: "{{ webmethods_apigateway_port_detail.protocol }}"
          __wmport_port: "{{ webmethods_apigateway_port_detail.port }}"

      - name: Get current API Gateway port based on listenerkey without bind address
        uri:
          url: "{{ apigateway_rest_is_ports }}?listenerKey={{ webmethods_apigateway_port_listenerkey_2ndtry }}"
          method: GET
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          force_basic_auth: yes
          validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
          status_code: [200]
          body_format: json
          timeout: 30
        register: get_existing_port_2ndtry

      - name: Response for current API Gateway port based on listenerkey without the bindAddress
        debug: var=get_existing_port_2ndtry verbosity=1

    when: get_existing_port.json.uniqueID is not defined and webmethods_apigateway_port_detail.bindAddress == "0.0.0.0"

  - name: Update existing port object if the 2nd try did find something
    set_fact:
      get_existing_port: "{{ get_existing_port_2ndtry }}"
      webmethods_apigateway_port_listenerkey: "{{ webmethods_apigateway_port_listenerkey_2ndtry }}"
    when: get_existing_port_2ndtry.json.uniqueID is defined

  - name: Final response object for current API Gateway port
    debug: var=get_existing_port verbosity=1

  - name: If current API Gateway port exists, update it
    block:

      - name: Update body object
        set_fact:
          webmethods_apigateway_port_detail: "{{ webmethods_apigateway_port_detail | combine({'listenerKey': webmethods_apigateway_port_listenerkey, 'oldPkg': webmethods_apigateway_port_detail.pkg},recursive=True) }}"

      - name: First, if port is enabled, disable the port before updating it
        include_tasks: "ports/enable.yml"
        vars:
          ports_listenerkey: "{{ webmethods_apigateway_port_listenerkey }}"
          ports_pkg: "{{ webmethods_apigateway_port_detail.pkg }}"
          ports_enable: false
        when: get_existing_port.json.enabled | bool

      - name: Update api gateway port
        uri:
          url: "{{ apigateway_rest_is_ports }}"
          method: "PUT"
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          body: "{{ webmethods_apigateway_port_detail | default({}) | to_json }}"
          force_basic_auth: yes
          validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: webmethods_apigateway_port_saved
  
      - name: Response check - For an UPDATE, fail if json response does not contain the newlistenerKey field
        fail: 
          msg: "unexpected json response...something wrong happened"
        when: webmethods_apigateway_port_saved.json.newlistenerKey is not defined

      - name: Set listener key based on the response object
        set_fact:
          webmethods_apigateway_port_listenerkey: "{{ webmethods_apigateway_port_saved.json.newlistenerKey }}"

      - name: re-enable the port if it was enabled pre-update
        include_tasks: "ports/enable.yml"
        vars:
          ports_listenerkey: "{{ webmethods_apigateway_port_listenerkey }}"
          ports_pkg: "{{ webmethods_apigateway_port_detail.pkg }}"
          ports_enable: true
        when: get_existing_port.json.enabled | bool

    when: get_existing_port.json.uniqueID is defined


  - name: If current API Gateway port does not exists, add it
    block:

      - name: Save api gateway port
        uri:
          url: "{{ apigateway_rest_is_ports }}"
          method: "POST"
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          body: "{{ webmethods_apigateway_port_detail | default({}) | to_json }}"
          force_basic_auth: yes
          validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: webmethods_apigateway_port_saved

      - name: Response check1 - For a new ADD, fail if json response status is not success
        fail: 
          msg: "unexpected json response - status != success - something wrong happened"
        when: webmethods_apigateway_port_saved.json.status != "success"

      - name: Response check2 - Fail if json response does not contain the listenerKey field
        fail: 
          msg: "unexpected json response - listenerKey field does not exist - something wrong happened"
        when: webmethods_apigateway_port_saved.json.listenerKey is not defined

      - name: Set listener key based on the response object
        set_fact:
          webmethods_apigateway_port_listenerkey: "{{ webmethods_apigateway_port_saved.json.listenerKey }}"

    when: get_existing_port.json.uniqueID is not defined

  - name: Save access mode for the port
    uri:
      url: "{{ apigateway_rest_is_ports }}/{{ webmethods_apigateway_port_listenerkey }}/accessMode"
      method: "POST"
      user: "{{ apigateway_rest_login_username }}"
      password: "{{ apigateway_rest_login_password }}"
      return_content: yes
      body: "{{ webmethods_apigateway_port.access_mode | to_json }}"
      force_basic_auth: yes
      validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
      status_code: [200, 201]
      body_format: json
      timeout: 30
    register: webmethods_apigateway_port_accessmode_saved
    when: webmethods_apigateway_port.access_mode is defined

  - name: Response for the saved object
    debug: var=webmethods_apigateway_port_accessmode_saved verbosity=1

  - name: Save IP access mode for the port
    uri:
      url: "{{ apigateway_rest_is_ports }}/{{ webmethods_apigateway_port_listenerkey }}/ipAccessMode"
      method: "POST"
      user: "{{ apigateway_rest_login_username }}"
      password: "{{ apigateway_rest_login_password }}"
      return_content: yes
      body: "{{ webmethods_apigateway_port.ip_access_mode | to_json }}"
      force_basic_auth: yes
      validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
      status_code: [200, 201]
      body_format: json
      timeout: 30
    register: webmethods_apigateway_port_ipaccessmode_saved
    when: webmethods_apigateway_port.ip_access_mode is defined

  - name: Response for the saved object
    debug: var=webmethods_apigateway_port_ipaccessmode_saved verbosity=1