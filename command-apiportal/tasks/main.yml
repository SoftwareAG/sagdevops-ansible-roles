---

- name: First default to type=command if the type is not defined
  set_fact:
    webmethods_apiportal_acc_command_type: "command"
  when: webmethods_apiportal_acc_command_type is not defined

- debug:
    msg: "Running apiportal ACC command {{ webmethods_apiportal_acc_command | default('undefined') }}"
  when: webmethods_apiportal_acc_command_type == "command"

- debug:
    msg: "Running apiportal ACC command file {{ webmethods_apiportal_acc_commandfile | default('undefined') }}"
  when: webmethods_apiportal_acc_command_type == "file"

- name: Check that the exec file exists
  stat:
    path: "{{ webmethods_apiportal_acc_exec_dir }}/acc.sh"
  register: acc_exists

- name: fail if exec file does not exist
  fail:
    msg: "ACC executable does not exist..."
  when: not acc_exists.stat.exists

- name: fail if mandatory param not specified
  fail:
    msg: "A mandatory param was not defined, cannot do anything."
  when: mandatory_item is not defined
  with_items:
    - "{{ webmethods_apiportal_acc_host }}"
    - "{{ webmethods_apiportal_acc_port }}"
    - "{{ webmethods_apiportal_acc_user }}"
  loop_control:
    loop_var: mandatory_item

- name: fail if command type is not valid
  fail:
    msg: "webmethods_apiportal_acc_command_type not valid...must be one of ('command','file'). Cannot do anything."
  when: not (webmethods_apiportal_acc_command_type | default()) in ('command','file')

- name: Command of type command
  block:

    - name: fail if a command was NOT provided
      fail:
        msg: "A command or command file was not provided"
      when:  webmethods_apiportal_acc_command is not defined or webmethods_apiportal_acc_command == ""

    - name: Create the command to execute, with a adhoc command
      set_fact:
        command_to_exec:
          - "/bin/bash"
          - "acc.sh"
          - "-h"
          - "{{webmethods_apiportal_acc_host}}"
          - "-u"
          - "{{webmethods_apiportal_acc_user}}"
          - "-pwd"
          - "{{webmethods_apiportal_acc_password}}"
          - "-p"
          - "{{webmethods_apiportal_acc_port}}"
          - "{{webmethods_apiportal_acc_command}}"
      no_log: "{{ not ( disable_no_log | default(false,true) ) }}"
      when: webmethods_apiportal_acc_command is defined and webmethods_apiportal_acc_command != ""

  when: webmethods_apiportal_acc_command_type == "command"

- name: Command of type file
  block:

    - name: fail if a command FILE was NOT provided
      fail:
        msg: "A command file was not provided"
      when: webmethods_apiportal_acc_commandfile is not defined or webmethods_apiportal_acc_commandfile == ""

    - name: Check if command file exists
      stat:
        path: "{{ webmethods_apiportal_acc_commandfile }}"
      register: stat_command_file

    - name: fail if a command FILE does not exist on the file system
      fail:
        msg: "The command file at {{ webmethods_apiportal_acc_commandfile }} does not exist on the file system"
      when: stat_command_file.stat.exists == false

    - name: Create the command to execute, with a command file
      set_fact:
        command_to_exec:
          - "/bin/bash"
          - "acc.sh"
          - "-h"
          - "{{webmethods_apiportal_acc_host}}"
          - "-u"
          - "{{webmethods_apiportal_acc_user}}"
          - "-pwd"
          - "{{webmethods_apiportal_acc_password}}"
          - "-p"
          - "{{webmethods_apiportal_acc_port}}"
          - "-f"
          - "{{webmethods_apiportal_acc_commandfile}}"
      no_log: "{{ not ( disable_no_log | default(false,true) ) }}"
      when: stat_command_file.stat.exists

  when: webmethods_apiportal_acc_command_type == "file"

- name: execute ACC command
  command:
    argv: "{{ command_to_exec }}"
    chdir: "{{ webmethods_apiportal_acc_exec_dir }}"
  async: "{{ rvar_command_apiportal_async_timeout }}"
  poll: "{{ rvar_command_apiportal_async_poll }}"
  register: cmd_async
  no_log: "{{ not ( disable_no_log | default(false,true) ) }}"

- name: check status for ACC command
  async_status:
    jid: "{{ cmd_async.ansible_job_id }}"
  register: cmd_result
  until: cmd_result.finished
  retries: "{{ rvar_command_apiportal_async_retries }}"
  delay: "{{ rvar_command_apiportal_async_delay }}"

- name: Print the cmd_result to the console.
  debug:
    msg: "{{ cmd_result.stdout_lines | join('\n') }}"
