---

  - name: Single Package to install
    debug: var=wmis_cfgparams_install_package_single verbosity=3

  - name: Set changed flag to false if not defined
    set_fact: 
      configure_integrationserver_install_package_changed: false
    when: configure_integrationserver_install_package_changed is not defined

  - name: fail if mandatory params not specified
    fail:
      msg: "A mandatory param was not defined, cannot do anything."
    when: item is not defined
    with_items:
      - "{{ wmis_cfgparams_install_package_single.bucket_path }}"
      - "{{ wmis_cfgparams_install_package_single.target_instance_name }}"

  - name: set target package name from the passed-in variables
    set_fact: 
      __target_package_name: "{{ wmis_cfgparams_install_package_single.target_package_name }}"
    when: wmis_cfgparams_install_package_single.target_package_name is defined and wmis_cfgparams_install_package_single.target_package_name != ""

  - name: OR default package name to the name of the file on the remote location
    set_fact: 
      __target_package_name: "{{ (wmis_cfgparams_install_package_single.bucket_path | basename | splitext)[0] }}"
    when: wmis_cfgparams_install_package_single.target_package_name is not defined or wmis_cfgparams_install_package_single.target_package_name == ""

  - name: Set the target instance for this package install in order to get the riht path for the packages folder
    set_fact: 
      product_instance_name: "{{ wmis_cfgparams_install_package_single.target_instance_name }}"
  
  - name: Set the local target package path
    set_fact: 
      __target_package_dir: "{{ runtime_instance_package_home }}/{{ __target_package_name }}"

  - name: set temp local download path
    set_fact: 
      __local_download_path: "{{ runtime_instance_package_home }}/{{ wmis_cfgparams_install_package_single.bucket_path | basename }}"

  - debug: var=__target_package_name verbosity=3
  - debug: var=wmis_cfgparams_install_packages_force_reinstall_list verbosity=3

  - name: check if we should force re-install the package even if it exists
    set_fact: 
      __target_force_reinstall_package: true
    when: __target_package_name in (wmis_cfgparams_install_packages_force_reinstall_list | default([],true))

  - name: check 1 if package already installed
    stat: 
      path: "{{ __target_package_dir }}/manifest.rel"
    register: check_package_installed_1

  - name: check 2 if package already installed
    stat: 
      path: "{{ __target_package_dir }}/manifest.v3"
    register: check_package_installed_2

  - debug: var=check_package_installed_1 verbosity=3
  - debug: var=check_package_installed_2 verbosity=3

  - name: is package installed?
    set_fact: 
      check_package_installed: "{{ check_package_installed_1.stat.exists or check_package_installed_2.stat.exists }}"

  - debug: var=check_package_installed verbosity=3

  - name: Install package only if it's not already there, or if force-reinstall var is set
    block:

      - debug: 
          msg: "Re-installing package {{ __target_package_name }} in Integration Server instance \"{{ product_instance_name }}\""
          verbosity: 1
        when: (check_package_installed | bool) and (__target_force_reinstall_package | bool)
      
      - debug: 
          msg: "Installing new package {{ __target_package_name }} in Integration Server instance \"{{ product_instance_name }}\"" 
          verbosity: 1
        when: (check_package_installed | bool) == false

      - name: Downloading the package from s3 to apply on integration server
        import_role: 
          name: aws-wrapper
        vars:
          command: get-files-from-s3
          getfroms3_files_descriptor_list:
            - bucket_path: "{{ wmis_cfgparams_install_package_single.bucket_path }}"
              local_path: "{{ __local_download_path }}"
              local_path_permission: "0600"
              local_path_create_dir_ifnotexist: true
              local_path_create_dir_permission: "0700"
              force_download: "true"

      - name: First, delete the target folder if it exists and we are installing
        file:
          path: "{{ __target_package_dir }}"
          state: absent

      - name: Create the extracted dir on the remote machine
        file:
          path: "{{ __target_package_dir }}"
          state: directory

      - name: Unarchive the packages on the remote machine
        unarchive:
          src: "{{ __local_download_path }}"
          dest: "{{ __target_package_dir }}"
          remote_src: yes

      - name: Delete the archive once extracted
        file:
          path: "{{ __local_download_path }}"
          state: absent
      
      - name: check if package installed
        stat: 
          path: "{{ __target_package_dir }}/manifest.rel"
        register: webmethods_package_just_installed

      - name: Set changed flag to true
        set_fact:
          configure_integrationserver_install_package_changed: true
  
    when: (check_package_installed | bool) == false or __target_force_reinstall_package | default() | bool