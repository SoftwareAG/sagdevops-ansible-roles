---

  ## get the hosts of the terracotta nodes
  ## in the format that's expected: "host1:port,host2:port,host3:port"
  - import_role: 
      name: get-inventory-hosts
    vars:
      inventory_pattern: "{{ external_terracotta_inventory_pattern }}"
      inventory_hosts_property: "ansible_host"
      inventory_hosts_clear_first: true
      inventory_hosts_add_prefix: ""
      inventory_hosts_add_suffix: ":{{ external_terracotta_port }}"
  
  - name: Set terracotta_hosts_list facts
    set_fact:
      terracotta_hosts_list: "{{ output_inventory_hosts }}"

  - name: Set external terracotta in the right file if host list is not empty
    block:

      - name: "Update config file {{ runtime_instance_config_file }}"
        lineinfile:
          path: "{{ runtime_instance_config_file }}"
          regexp: '^{{ item.key }}'
          insertafter: '^#{{ item.key }}'
          line: "{{ item.key }}={{ item.value }}"
        with_dict:
          watt.server.cluster.aware: "true"
          watt.server.cluster.tsaURLs: "{{ terracotta_hosts_list | join(',') }}"
          watt.server.cluster.name: "TC_CLUSTER"
          watt.server.cluster.action.errorOnStartup: "shutdown"
          watt.server.cachemanager.connectTimeout: 30000
          watt.server.cluster.SessTimeout: 90

      - name: "Update config file {{ custom_wrapper_file }} with terracotta specific settings"
        lineinfile:
          path: "{{ custom_wrapper_file }}"
          regexp: '^{{ item.key }}'
          insertafter: '^#{{ item.key }}'
          line: "{{ item.key }}={{ item.value }}"
        with_dict:
          wrapper.java.additional.500: "-Dtest.cluster.withDerby={{ is_clustering_use_internal_db | bool | lower }}"
          wrapper.java.additional.501: "-Dcom.tc.tc.config.total.timeout=1200000"
          wrapper.java.additional.502: "-Dcom.tc.l1.max.connect.retries=100"
          wrapper.java.additional.503: "-Dcom.tc.l1.socket.reconnect.waitInterval=10000"
          wrapper.java.additional.504: "-Dl1.max.connect.retries=180"
          wrapper.java.additional.505: "-Dl1.connect.versionMatchCheck.enabled=true"
          wrapper.java.additional.506: "-Dl1.socket.connect.timeout=10000"
          wrapper.java.additional.507: "-Dl1.socket.reconnect.waitInterval=10000"

      - name: Check if terracotta license file is there
        stat: 
          path: "{{ webmethods_terracotta_license_path }}"
        register: stat_terracotta_license_exists

      - name: Get Terracotta license from the license repo if it's not there already
        block:

          - import_role: 
              name: provision-with-installer-from-s3
            vars:
              provision_action: get_licenses_from_s3
              webmethods_localrepo_license_zip_filename: "licenses_for_terracotta.zip"
              webmethods_localrepo_license_inzip_filepath_copy_src: "{{ webmethods_terracotta_license_downloadnew_inzip_path }}"
              webmethods_localrepo_license_inzip_filepath_copy_dest: "{{ webmethods_terracotta_license_path }}"

          - import_role: 
              name: provision-with-installer-from-s3
            vars:
              provision_action: cleanup

          - name: Re-Check if terracotta license file is there now
            stat: 
              path: "{{ webmethods_terracotta_license_path }}"
            register: stat_terracotta_license_exists_recheck

          - name: fail if terracotta license file is still not there
            fail:
              msg: "terracotta license file is still not in the expected location...clustering will not work without it."
            when: stat_terracotta_license_exists_recheck.stat.exists == false

        when: stat_terracotta_license_exists.stat.exists == false

      - name: Re-Clear the terracotta_hosts_list list
        set_fact:
          terracotta_hosts_list: []
          output_inventory_hosts: []

    when: terracotta_hosts_list is defined and (terracotta_hosts_list|length > 0)
