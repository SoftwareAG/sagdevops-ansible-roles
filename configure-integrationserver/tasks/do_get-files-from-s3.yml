---

  - name: Install the files only if the list is not empty
    block:

      - name: Create the dirs machine if they don't exist
        file:
          path: "{{ outer_item.local_path | dirname }}"
          state: directory
        when: outer_item.local_path is defined and outer_item.local_path != ""
        with_items: "{{ webmethods_download_files_s3 }}"
        loop_control:
          loop_var: outer_item

      - name: gettting the files to add to integration server
        include_role:
          name: aws-wrapper
        vars:
          command: "getfroms3"
          getfroms3_bucket_name: "{{ outer_item.remote_s3_bucket_name | default('undefined', true) }}"
          getfroms3_bucket_path: "{{ outer_item.remote_s3_bucket_path | default('undefined', true) }}"
          getfroms3_local_path: "{{ outer_item.local_path }}"
          getfroms3_local_path_owner_user: "{{ outer_item.local_path_owner_user | default('',true) }}"
          getfroms3_local_path_owner_group: "{{ outer_item.local_path_owner_group | default('',true) }}"
          getfroms3_local_path_permission: "{{ outer_item.local_path_permission | default('',true) }}"
          getfroms3_force_download: "{{ outer_item.force_download | default('false',true) }}"
        when: outer_item.local_path is defined and outer_item.local_path != ""
        with_items: "{{ webmethods_download_files_s3 }}"
        loop_control:
          loop_var: outer_item

    when: webmethods_download_files_s3 is defined and (webmethods_download_files_s3|length > 0)
