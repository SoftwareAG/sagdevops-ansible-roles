---

- debug: var=webmethods_install_products_descriptor verbosity=3

- name: fail if mandatory params not specified
  fail:
    msg: "A mandatory param was not defined, cannot do anything."
  when: item is not defined
  with_items:
    - "{{ webmethods_install_products_descriptor.script }}"
    - "{{ webmethods_install_products_descriptor.binaries_image }}"

- name: Include tasks to fetch the fix files from s3
  include_tasks: "command_get_files_from_s3.yml"
  vars:
    webmethods_provisioning_files_download_descritors:
      - "{{ webmethods_install_products_descriptor.installer }}"
      - "{{ webmethods_install_products_descriptor.script }}"
      - "{{ webmethods_install_products_descriptor.binaries_image }}"

- name: Include licenses to fetch from s3
  include_tasks: "command_get_files_from_s3.yml"
  vars:
    webmethods_provisioning_files_download_descritors: "{{ webmethods_install_products_descriptor.licenses }}"

- name: Copy script file to a working runtime copy
  copy:
    src: "{{ webmethods_install_products_descriptor.script.local_path }}"
    dest: "{{ webmethods_install_products_descriptor.script.local_path }}.runtime"
    mode: '0644'
    remote_src: yes

- name: Update the script file with values from the variables
  replace:
    path: "{{ webmethods_install_products_descriptor.script.local_path }}.runtime"
    backup: no
    regexp: "{{ ['{{', item.key , '}}'] | join('[ ]*') }}"
    replace: "{{ item.value }}"
  with_dict:
    __installer_target_path: "{{ webmethods_install_products_descriptor.target_install_dir }}"
    __installer_product_image: "{{ webmethods_install_products_descriptor.binaries_image.local_path }}"
    __installer_target_hostname: ""

- name: Update the script file with license values
  replace:
    path: "{{ webmethods_install_products_descriptor.script.local_path }}.runtime"
    backup: no
    regexp: "{{ [ '{{' , (['__installer_product_license.', (item.0 + 1) ] | join('')) , '}}' ] | join('[ ]*') }}"
    replace: "{{ item.1.local_path }}"
  with_indexed_items: "{{ webmethods_install_products_descriptor.licenses }}"

- name: "Include tasks to fetch the license files from s3"
  include_tasks: "command_get_licenses_from_s3.yml"
  vars:
    webmethods_provisioning_files_download_descritors:
      - bucket_path: "{{ webmethods_s3repo_license_zip_filename }}"
        local_path: "{{ webmethods_localrepo_license_zip_filename | default('licenses.zip', true) }}"

- name: Set base extracted license path variable
  set_fact:
    webmethods_localrepo_license_extractedzip_path: "{{ webmethods_localrepo_target_dir }}/{{ (webmethods_localrepo_license_zip_filename | default('licenses.zip', true) | basename | splitext)[0] }}"

- name: Write the install scripts on disk with all the params
  template:
    src: "install_products.sh.j2" 
    dest: "{{ webmethods_localrepo_target_dir }}/install_products.sh"
    owner: "{{ webmethods_install_localtarget_files_owner_user }}"
    group: "{{ webmethods_install_localtarget_files_owner_group }}"
    mode: "{{ webmethods_install_localtarget_files_permissions }}"
    backup: no

- name: run install_product command
  command: "/bin/bash install_products.sh"
  args:
    chdir: "{{ webmethods_localrepo_target_dir }}"
  async: "{{ webmethods_install_async }}"
  poll: "{{ webmethods_install_poll }}"
  register: install_product_sleeper

- name: Check status for install_product task
  async_status:
    jid: "{{ install_product_sleeper.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: "{{ webmethods_install_async_retries }}"
  delay: "{{ webmethods_install_async_delay }}"

- name: Print the job_result to the console.
  debug:
    msg: "{{ job_result.stdout_lines | join('\n') }}"

- name: "Include tasks to cleanup the install artifacts"
  include_tasks: "command_cleanup.yml"