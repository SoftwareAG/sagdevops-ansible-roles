---
 
  - name: Check if CCE install was already done
    stat: 
      path: "{{ webmethods_cce_bootstrap_successflag_file }}"
    register: stat_cceInstallAlreadyDone

  - name: Install CCE only if it was not installed already
    block:
    
      - name: Fetch from s3 the install artifacts
        include_role:
          name: aws-wrapper
        vars:
          command: get-files-from-s3
          getfroms3_files_descriptor_list:
            - bucket_path: "{{ webmethods_s3repo_installer_filename }}"
              local_path: "{{ webmethods_localrepo_installer_filename }}"
              force_download: true
          getfroms3_throttle: "{{ rvar_install_downloads_throttle }}"

      - name: Make sure the webmethods_cce_bootstrap_installer file is executable
        file: 
          path: "{{ webmethods_cce_bootstrap_installer_exec_dir }}/{{ webmethods_cce_bootstrap_installer }}"
          mode: "u+rwx"
        
      - name: Set the params initial
        set_fact:
          install_command: ['./{{ webmethods_cce_bootstrap_installer }}']

      - name: append webmethods_cce_bootstrap_agreement if exists
        set_fact:
          install_command: "{{ install_command }} + [ '{{ webmethods_cce_bootstrap_agreement }}' ]"
        when: webmethods_cce_bootstrap_agreement is defined and webmethods_cce_bootstrap_agreement != ""
      
      - name: append webmethods_cce_bootstrap_install_dir if exists
        set_fact:
          install_command: "{{ install_command }} + [ '-d' ] + [ '{{ webmethods_cce_bootstrap_install_dir }}' ]"
        when: webmethods_cce_bootstrap_install_dir is defined and webmethods_cce_bootstrap_install_dir != ""

      - name: append webmethods_cce_bootstrap_distro if exists
        set_fact:
          install_command: "{{ install_command }} + [ '-D' ] + [ '{{ webmethods_cce_bootstrap_distro }}' ]"
        when: webmethods_cce_bootstrap_distro is defined and webmethods_cce_bootstrap_distro != ""

      - name: append webmethods_cce_bootstrap_http_port if exists
        set_fact:
          install_command: "{{ install_command }} + [ '-c' ] + [ '{{ webmethods_cce_bootstrap_http_port }}' ]"
        when: webmethods_cce_bootstrap_http_port is defined and webmethods_cce_bootstrap_http_port != ""

      - name: append webmethods_cce_bootstrap_https_port if exists
        set_fact:
          install_command: "{{ install_command }} + [ '-C' ] + [ '{{ webmethods_cce_bootstrap_https_port }}' ]"
        when: webmethods_cce_bootstrap_https_port is defined and webmethods_cce_bootstrap_https_port != ""

      - name: append webmethods_cce_bootstrap_spm_http_port if exists
        set_fact:
          install_command: "{{ install_command }} + [ '-s' ] + [ '{{ webmethods_cce_bootstrap_spm_http_port }}' ]"
        when: webmethods_cce_bootstrap_spm_http_port is defined and webmethods_cce_bootstrap_spm_http_port != ""

      - name: append webmethods_cce_bootstrap_spm_https_port if exists
        set_fact:
          install_command: "{{ install_command }} + [ '-S' ] + [ '{{ webmethods_cce_bootstrap_spm_https_port }}' ]"
        when: webmethods_cce_bootstrap_spm_https_port is defined and webmethods_cce_bootstrap_spm_https_port != ""

      - name: append webmethods_cce_bootstrap_password if exists
        set_fact:
          install_command: "{{ install_command }} + [ '-p' ] + [ '{{ webmethods_cce_bootstrap_password }}' ]"
        when: webmethods_cce_bootstrap_password is defined and webmethods_cce_bootstrap_password != ""

      - name: append webmethods_cce_bootstrap_host if exists
        set_fact:
          install_command: "{{ install_command }} + [ '-H' ] + [ '{{ webmethods_cce_bootstrap_host }}' ]"
        when: webmethods_cce_bootstrap_host is defined and webmethods_cce_bootstrap_host != ""

      - name: Print the command
        debug:
          msg: "Running Installation Command from {{ webmethods_cce_bootstrap_installer_exec_dir }}: {{ install_command | join(' ') }}"

      - name: Run CCE installation
        command:
          argv: "{{ install_command }}"
        args:
          chdir: "{{ webmethods_cce_bootstrap_installer_exec_dir }}"
        async: 1000
        poll: 0
        register: install_ccserver_sleeper

      - name: Check status of CCE installation command
        async_status:
          jid: "{{ install_ccserver_sleeper.ansible_job_id }}"
        register: job_result
        until: job_result.finished
        retries: 200
        delay: 20
      
      - name: Print the job_result to the console.
        debug:
          msg: "{{ job_result.stdout_lines | join('\n') }}"

      - name: touch to mark that it's been run
        file:
          path: "{{ webmethods_cce_bootstrap_successflag_file }}"
          state: touch

    when: stat_cceInstallAlreadyDone.stat.exists == false