---

  - name: set initial facts
    set_fact:
      runnable_suffix: "{{ webmethods_apiportal_acc_install_size_code }}"

  - name: fail if runnable_suffix not specified
    fail: 
      msg: "runnable_suffix not specified...cannot do anything."
    when: runnable_suffix is not defined or runnable_suffix == ""

## 1 - stopall, deconfigure postgres, start zookeeper only

  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "stopall"
  
  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "wait for STOPPED of apiportalbundle_{{ runnable_suffix }} timeout 300"
  
  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "wait for STOPPED of kibana_{{ runnable_suffix }} timeout 300"
  
  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "wait for STOPPED of elastic_{{ runnable_suffix }} timeout 300"
  
  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "wait for STOPPED of cloudsearch_{{ runnable_suffix }} timeout 300"

  # TODO: we should not wait for STOPPED if postgres is already in DEACTIVATED state...we need a way to check for state before hand
  # - import_role: 
  #     name: command-apiportal
  #   vars:
  #     webmethods_apiportal_acc_command_type: "command"
  #     webmethods_apiportal_acc_command: "wait for STOPPED of postgres_{{ runnable_suffix }} timeout 300"

  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "wait for STOPPED of zoo_{{ runnable_suffix }} timeout 300"

  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "activate postgres_{{ runnable_suffix }}"

  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "start zoo_{{ runnable_suffix }}"

## 2 - Remove enhancement -how?

## 3 - Assign the tenant to the internal service (which is by default ID db0000000000)

  - name: Populate ACC command file
    template:
      src: apiportal_extdb_assign_tenant.j2
      dest: "{{ webmethods_apiportal_acc_exec_dir }}/apiportal_extdb_assign_tenant.tp"
      mode: "0644"
    vars:
      __ext_service_id: "db0000000000"

  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "file"
      webmethods_apiportal_acc_commandfile: "{{ webmethods_apiportal_acc_exec_dir }}/apiportal_extdb_assign_tenant.tp"

  - name: Remove command file
    ansible.builtin.file:
      path: "{{ webmethods_apiportal_acc_exec_dir }}/apiportal_extdb_assign_tenant.tp"
      state: absent

## 4 - De-register external service if it was defined (TODO: we could use a loop to deregister all the db service if there was multiple)

  - name: Get external service id
    include_tasks: "do_get-externalservice-latest-id.yml"
    vars:
      rvar_apiportal_configs_externalservice_type: DB
  
  - name: Cleanup external DB service if one was defined
    block:

      - import_role: 
          name: command-apiportal
        vars:
          webmethods_apiportal_acc_command_type: "command"
          webmethods_apiportal_acc_command: "deregister external service {{ externalservice_latest_id }}"

    when: externalservice_latest_id is defined and externalservice_latest_id != ""

## 5 - startall

  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "startall"
  
  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "wait for STARTED of apiportalbundle_{{ runnable_suffix }} timeout 900"