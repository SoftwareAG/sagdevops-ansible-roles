---

  - debug: var=rvar_apiportal_password_to_encrypt verbosity=3

  - name: fail if mandatory param not specified
    fail: 
      msg: "A mandatory param was not defined, cannot do anything."
    when: item is not defined
    with_items:
      - "{{ rvar_apiportal_password_to_encrypt }}"

  - name: Init the command
    set_fact:
      command_to_exec: ['./y-password.sh']

  - name: append command name
    set_fact:
      command_to_exec: "{{ command_to_exec }} + [ 'encrypt' ]"

  - name: append admin user
    set_fact:
      command_to_exec: "{{ command_to_exec }} + [ '{{ rvar_apiportal_password_to_encrypt }}' ]"

  - name: Print the command that we're going to run
    debug:
      msg: "About to run: {{ command_to_exec|join(' ') }}"
      verbosity: 1
    no_log: "{{ not ( disable_no_log | default(false,true) ) }}"

  - name: execute command
    command:
      argv: "{{ command_to_exec }}"
      chdir: "{{ webmethods_apiportal_tools_dir }}"
    register: cmd_result
    no_log: "{{ not ( disable_no_log | default(false,true) ) }}"

  - name: Print the cmd_result to the console.
    debug:
      msg: "{{ cmd_result.stdout_lines | join('\n') }}"

  - name: fail if result is not 2 lines
    fail: 
      msg: "The encrypted tool did not return the right result...investigate"
    when: cmd_result.stdout_lines | length != 2

  - name: extract encrypted password
    shell: "echo \"{{ cmd_result.stdout_lines.1 }}\" | cut -d\"'\" -f 2"
    register: cmd_parsing

  - name: set encrypted value
    set_fact:
      encrypted_value: "{{ cmd_parsing.stdout }}"

  - debug: var=encrypted_value