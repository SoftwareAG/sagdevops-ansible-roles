---

  - name: set initial facts
    set_fact:
      runnable_suffix: "{{ webmethods_apiportal_acc_install_size_code }}"

  - name: fail if runnable_suffix not specified
    fail: 
      msg: "runnable_suffix not specified...cannot do anything."
    when: runnable_suffix is not defined or runnable_suffix == ""

  - name: fail if rvar_apiportal_configs_externaldb not specified
    fail: 
      msg: "rvar_apiportal_configs_externaldb not specified...cannot do anything."
    when: rvar_apiportal_configs_externaldb is not defined

  - name: fail if dbtype not specified or not valid
    fail: 
      msg: "rvar_apiportal_configs_externaldb.db_type not valid...must be one of ('oracle','mssql','postgres'). Cannot do anything."
    when: not (rvar_apiportal_configs_externaldb.db_type | default()) in ('oracle','mssql','postgres')

## 1 - stopall, deconfigure postgres, start zookeeper only

  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "stopall"
    
  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "wait for STOPPED of apiportalbundle_{{ runnable_suffix }} timeout 300"
  
  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "wait for STOPPED of kibana_{{ runnable_suffix }} timeout 300"
  
  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "wait for STOPPED of elastic_{{ runnable_suffix }} timeout 300"
  
  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "wait for STOPPED of cloudsearch_{{ runnable_suffix }} timeout 300"

  # TODO: we should not wait for STOPPED if postgres is already in DEACTIVATED state...we need a way to check for state before hand
  # - import_role: 
  #     name: command-apiportal
  #   vars:
  #     webmethods_apiportal_acc_command_type: "command"
  #     webmethods_apiportal_acc_command: "wait for STOPPED of postgres_{{ runnable_suffix }} timeout 300"

  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "wait for STOPPED of zoo_{{ runnable_suffix }} timeout 300"

  ## we chose here to just deactivate the runnable, as opposed to "deconfigure" (which would delete all the data) 
  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "deactivate postgres_{{ runnable_suffix }}"
  
  - debug: 
      msg: 
        - "The internal postgres runnable was just 'deactivated' to avoid accidental deletion of all the internal postgres data until this point."
        - "If you are sure you want to delete postgres and all its data, manually run the command 'deconfigure postgres_{{ runnable_suffix }}'"

  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "start zoo_{{ runnable_suffix }}"

## 2 - Enhancing the runnable with the JDBC jar
  
  - name: Check if JDBC jar is available on the file system
    stat:
      path: "{{ rvar_apiportal_configs_externaldb.jdbc_jar_path }}"
    register: stat_jdbc_jar

  - name: Install configuration only if defined
    block:

      - import_role: 
          name: command-apiportal
        vars:
          webmethods_apiportal_acc_command_type: "command"
          webmethods_apiportal_acc_command: "enhance apiportalbundle_{{ runnable_suffix }} with commonsClasspath local file \"{{ rvar_apiportal_configs_externaldb.jdbc_jar_path }}\""

    when: stat_jdbc_jar.stat.exists

  - debug: 
      msg: 
        - "Warning: could not JDBC enhance the runnable because the JDBC jar {{ rvar_apiportal_configs_externaldb.jdbc_jar_path | default('undefined') }} was not found."
    when: stat_jdbc_jar.stat.exists == false

## 3 - Register the DB service in zookeeper

  - name: Get external service id
    include_tasks: "do_get-externalservice-latest-id.yml"
    vars:
      rvar_apiportal_configs_externalservice_type: DB
  
  - name: save current external service id
    set_fact:
      __old_externalservice_latest_id: "{{ externalservice_latest_id }}"

  - name: Populate ACC command file
    template:
      src: apiportal_register_extdb_{{ rvar_apiportal_configs_externaldb.db_type | default() | lower }}.j2
      dest: "{{ webmethods_apiportal_acc_exec_dir }}/apiportal_register_extdb_{{ rvar_apiportal_configs_externaldb.db_type | default() | lower }}.tp"
      mode: "0644"
    vars:
      configs_extdb: "{{ rvar_apiportal_configs_externaldb }}"

  # adding the no_log entry here because the output of the command shows the DB password
  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "file"
      webmethods_apiportal_acc_commandfile: "{{ webmethods_apiportal_acc_exec_dir }}/apiportal_register_extdb_{{ rvar_apiportal_configs_externaldb.db_type | default() | lower }}.tp"
    no_log: "{{ not ( disable_no_log | default(false,true) ) }}"

  - name: Get external service that was just created
    include_tasks: "do_get-externalservice-latest-id.yml"
    vars:
      rvar_apiportal_configs_externalservice_type: DB

  - name: fail if no new external service was created
    fail: 
      msg: "A new External service was not created, which is abnormal at this point in the playbook...investigate..."
    when: externalservice_latest_id is not defined or externalservice_latest_id == "" or externalservice_latest_id == __old_externalservice_latest_id

  - name: Remove command file if external service was created fine
    ansible.builtin.file:
      path: "{{ webmethods_apiportal_acc_exec_dir }}/apiportal_register_extdb_{{ rvar_apiportal_configs_externaldb.db_type | default() | lower }}.tp"
      state: absent

## 4 - Assign the tenant to the service

  - name: Populate ACC command file
    template:
      src: apiportal_extdb_assign_tenant.j2
      dest: "{{ webmethods_apiportal_acc_exec_dir }}/apiportal_extdb_assign_tenant.tp"
      mode: "0644"
    vars:
      __ext_service_id: "{{ externalservice_latest_id }}"

  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "file"
      webmethods_apiportal_acc_commandfile: "{{ webmethods_apiportal_acc_exec_dir }}/apiportal_extdb_assign_tenant.tp"

  - name: Remove command file
    ansible.builtin.file:
      path: "{{ webmethods_apiportal_acc_exec_dir }}/apiportal_extdb_assign_tenant.tp"
      state: absent

## 5 - Cleanup transient data in eladtic search and cloudsearch

  - name: Cleanup transient data (true by default)
    block:

      - debug: 
          msg: "Warning: cleaning up data in elasticsearch and cloudsearch (will backup the data though)"
        
      - name: Move cloudsearch data dir to a backup
        stat: path={{ webmethods_apiportal_work_cloudsearch_dir }}/rsindex
        register: stat_cloudsearch_data

      - name: Move cloudsearch data to bak
        command: mv {{ webmethods_apiportal_work_cloudsearch_dir }}/rsindex {{ webmethods_apiportal_work_cloudsearch_dir }}/rsindex.{{ ansible_date_time.iso8601_basic_short }}.bak
        when: stat_cloudsearch_data.stat.exists

      - name: Move elasticsearch data dir to a backup
        stat: path={{ webmethods_apiportal_work_elastic_dir }}/data/nodes
        register: stat_elasticsearch_data

      - name: Move cloudsearch data to bak
        command: mv {{ webmethods_apiportal_work_elastic_dir }}/data/nodes {{ webmethods_apiportal_work_elastic_dir }}/data/nodes.{{ ansible_date_time.iso8601_basic_short }}.bak
        when: stat_elasticsearch_data.stat.exists

    when: (rvar_apiportal_configs_externaldb.cleanupdata | default('true') | bool) == true

## 6 - startall

  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "startall"
  
  - import_role: 
      name: command-apiportal
    vars:
      webmethods_apiportal_acc_command_type: "command"
      webmethods_apiportal_acc_command: "wait for STARTED of apiportalbundle_{{ runnable_suffix }} timeout 900"

## 6 - cleanup

  - name: Cleanup old DB service
    block:

      - import_role: 
          name: command-apiportal
        vars:
          webmethods_apiportal_acc_command_type: "command"
          webmethods_apiportal_acc_command: "deregister external service {{ __old_externalservice_latest_id }}"

    when: __old_externalservice_latest_id is defined and __old_externalservice_latest_id != ""


