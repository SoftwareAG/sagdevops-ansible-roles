---

  - name: Forcing the re-configuration of config {{ config_item }}
    file:
      path: "{{ status_success_filepath }}"
      state: absent
    when: configure_cce_force == true

  - name: Check if CCE config was already done for config {{ config_item }}
    stat: 
      path: "{{ status_success_filepath }}"
    register: stat_cceConfigAlreadyDone

  - name: Prepare and configure CCE only if {{ status_success_filepath }} does not exist.
    block:
      - name: Only for Creds config item
        block:
          - name: Copy secrets file to target
            copy:
              src: "{{ item }}"
              dest: "/home/{{ cce_owner }}/.setenv_cce_secrets.sh"
              mode: '0600'
              remote_src: no
            with_fileglob:
              - "{{ cce_provisioning_secrets_path }}"

          - name: Check if expected secrets file is there
            stat: 
              path: "/home/{{ cce_owner }}/.setenv_cce_secrets.sh"
            register: stat_cceSecrets

          - name: Check if private ssh key is there
            stat: 
              path: "/home/{{ cce_owner }}/.ssh/id_rsa"
            register: stat_ccePrivateKey
          
          - name: fail if CCE PrivateKey not present
            fail: 
              msg: "PrivateKey not present...cannot do anything."
            when: stat_ccePrivateKey.stat.exists == false

          - name: fail if CCE Secrets not present
            fail: 
              msg: "Secrets not present...cannot do anything."
            when: stat_cceSecrets.stat.exists == false
        when: config_item == "creds"

      - name: Only for licenses config item
        block:
          - name: Check if expected licenses directory exists
            stat: 
              path: "{{ cce_provisioning_licenses_path }}"
            register: stat_ccelicensepath

          - name: fail if CCE Licenses path not there
            fail: 
              msg: "Product License path not there...cannot do anything."
            when: stat_ccelicensepath.stat.isdir is not defined or stat_ccelicensepath.stat.isdir == false
                  
        when: config_item == "licenses"

      - name: Only for repo_images config item
        block:
          - name: Check if expected image directory exists
            stat: 
              path: "{{ cce_provisioning_images_path }}"
            register: stat_cceimagepath

          - name: fail if expected image directory not there
            fail: 
              msg: "Product image directory not there...cannot do anything."
            when: stat_cceimagepath.stat.isdir is not defined or stat_cceimagepath.stat.isdir == false
                  
        when: config_item == "repo_images"

      - name: Clear the command params facts
        set_fact:
          cmd_params: []
      
      - name: append params to the cmd_params if specified
        set_fact:
          cmd_params: "{{ cmd_params }} + [ '{{ item.name }}={{ item.value }}' ]"
        with_items: "{{ cce_configure_params }}"
        when: cce_configure_params is defined

      - name: append secure params to the cmd_params if specified
        set_fact:
          cmd_params: "{{ cmd_params }} + [ '{{ item.name }}={{ item.value }}' ]"
        no_log: no
        with_items: "{{ cce_configure_params_secure }}"
        when: cce_configure_params_secure is defined

      - name: Run configure command for config item {{ config_item }}
        shell: ./scripts/configure_ccserver.sh '{{ cce_owner }}' '{{ config_item }}' {{ cmd_params|wrap|join(' ') }}
        async: 1000
        poll: 0
        no_log: yes
        args:
          chdir: "{{ cce_provisioning_code_path }}"
          creates: "{{ status_success_filepath }}"
        register: configure_ccserver_sleeper
        
      - name: Check status of configure command for config item {{ config_item }}
        async_status:
          jid: "{{ configure_ccserver_sleeper.ansible_job_id }}"
        register: job_result
        until: job_result.finished
        retries: 100
        delay: 10

      - name: Copy command result to file {{ status_stdout_filepath }}
        copy:
          content: "{{ job_result.stdout }}"
          dest: "{{ status_stdout_filepath }}"
  
      - name: clear the sensitive file post configure
        file:
          path: "/home/{{ cce_owner }}/.setenv_cce_secrets.sh"
          state: absent
        when: config_item == "creds"

      - name: clear the sensitive file post configure
        file:
          path: "/home/{{ cce_owner }}/sag_licenses.zip" 
          state: absent
        when: config_item == "licenses"

    when: stat_cceConfigAlreadyDone.stat.exists == false